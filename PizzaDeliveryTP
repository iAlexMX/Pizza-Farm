local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local backpack = player:WaitForChild("Backpack")

local function executeScript()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")

    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local backpack = player:WaitForChild("Backpack")
    local isMoving = false
    local targetYPosition = -60
    local currentDoor = nil
    local targetDoor = nil
    local lastDoor = nil

    local itemsToTrack = {"A1", "A2", "A3", "B1", "B2", "B3", "B4", "B5", "B6", "C1", "C2", "C3"}

    for _, seat in pairs(workspace:GetDescendants()) do
        if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
            seat.Disabled = true
        end
    end

    RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Position.Y < -50 then
            humanoidRootPart.Velocity = Vector3.zero
        end
    end)

    local function smoothTP(cframe)
        humanoidRootPart.CFrame = cframe
        wait(0.2)
    end

    local function teleportToDoor(door)
        if door == lastDoor then
            return
        end

        isMoving = true

        local giver = door
        local ogp = giver.Position
        smoothTP(giver.CFrame + Vector3.new(0, 7, 0))

        wait(0.2)

        humanoidRootPart.CFrame = CFrame.new(ogp.X, targetYPosition, ogp.Z)

        lastDoor = door

        isMoving = false
    end

    local function countItems()
        local counts = {}
        for _, itemName in ipairs(itemsToTrack) do
            counts[itemName] = 0
        end

        for _, item in ipairs(backpack:GetChildren()) do
            if counts[item.Name] ~= nil then
                counts[item.Name] += 1
            end
        end
        return counts
    end

    local function allItemsDelivered(counts)
        for _, count in pairs(counts) do
            if count > 0 then
                return false
            end
        end
        return true
    end

    local function checkAndDeliverItems()
        while true do
            wait(1)

            local counts = countItems()

            if allItemsDelivered(counts) then
                local waitTime = 3
                if lastDoor then
                    waitTime = (lastDoor == targetDoor) and 1 or 3
                end

                wait(waitTime)

                humanoidRootPart.CFrame = CFrame.new(Vector3.new(0, -500, 0))
                break
            end
        end
    end

    character.ChildAdded:Connect(function(item)
        if item:FindFirstChild("House") then
            local house = item.House.Value
            local doors = house:GetDescendants()

            for _, door in ipairs(doors) do
                if door.Name == "GivePizza" then
                    targetDoor = door

                    if isMoving then
                        isMoving = false
                    end

                    teleportToDoor(targetDoor)
                    break
                end
            end
        end
    end)

    task.spawn(checkAndDeliverItems)

    player.CharacterAdded:Connect(function()
        script:Destroy()
    end)
end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

local ExecuteButton = Instance.new("TextButton")
ExecuteButton.Size = UDim2.new(0, 30, 0, 30)
ExecuteButton.Position = UDim2.new(0, 800, 0, 141)
ExecuteButton.Text = "Ejecutar"
ExecuteButton.Font = Enum.Font.SourceSansBold
ExecuteButton.TextSize = 10
ExecuteButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
ExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton.Parent = ScreenGui

local DeleteButton = Instance.new("TextButton")
DeleteButton.Size = UDim2.new(0, 30, 0, 30)
DeleteButton.Position = UDim2.new(0, 800, 0, 178)
DeleteButton.Text = "Eliminar"
DeleteButton.Font = Enum.Font.SourceSansBold
DeleteButton.TextSize = 10
DeleteButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
DeleteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DeleteButton.Parent = ScreenGui

local dragging = false
local dragStart
local startPos

ExecuteButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
        dragStart = input.Position
        startPos = ExecuteButton.Position
    end
end)

ExecuteButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
        local delta = input.Position - dragStart
        ExecuteButton.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

ExecuteButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

DeleteButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        ExecuteButton:Destroy()
        DeleteButton:Destroy()
    end
end)

ExecuteButton.MouseButton1Click:Connect(function()
    executeScript()
end)