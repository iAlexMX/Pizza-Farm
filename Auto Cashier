-- Local player and other required services
local LocalPlayer = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Events = ReplicatedStorage:WaitForChild("Communication"):WaitForChild("Events")

-- Function to find child by index sequence
local function FindChildByIndexSequence(Parent, IndexSequence)
    local CurrentChild = Parent
    for _, Index in ipairs(IndexSequence) do
        CurrentChild = CurrentChild:FindFirstChild(tostring(Index))
        if not CurrentChild then
            return nil
        end
    end
    return CurrentChild
end

-- Cashier Class
local CashierClass = {}

CashierClass.Timeout = 10
CashierClass.Registers = {workspace.Register1, workspace.Register2, workspace.Register3}

function CashierClass:GetCustomers()
    local ValidCustomers = {}

    for _, Customer in next, workspace.Customers:GetChildren() do
        local InUse = FindChildByIndexSequence(Customer, {"Head", "InUse"})
        if InUse and InUse.Value == false and Customer:FindFirstChild("Torso") and (Customer.Torso.Velocity.Magnitude < 1 or math.round(Customer.Torso.Velocity.Z) == -15) and (Customer.HumanoidRootPart.Position - self:GetRegisterFromCustomer(Customer).Screen.Position).Magnitude < 22 and not Customer:GetAttribute("AlreadyHandled") then
            table.insert(ValidCustomers, Customer)
        end
    end

    return ValidCustomers
end

function CashierClass:GetRegisterFromCustomer(Customer)
    local BestRegister, BestDistance = nil, math.huge
    for _, Register in next, self.Registers do
        if Customer:FindFirstChild("HumanoidRootPart") and (Customer.HumanoidRootPart.Position - Register.Screen.Position).Magnitude < BestDistance then
            BestDistance = (Customer.HumanoidRootPart.Position - Register.Screen.Position).Magnitude
            BestRegister = Register
        end
    end

    return BestRegister
end

function CashierClass:GetClosestValidCustomer()
    local Customers = CashierClass:GetCustomers()

    local BestCustomer, BestDistance = nil, math.huge
    for _, Customer in next, Customers do
        if Customer:FindFirstChild("HumanoidRootPart") and (LocalPlayer.Character.HumanoidRootPart.Position - Customer.HumanoidRootPart.Position).Magnitude < BestDistance then
            BestDistance = (LocalPlayer.Character.HumanoidRootPart.Position - Customer.HumanoidRootPart.Position).Magnitude
            BestCustomer = Customer
        end
    end

    return BestCustomer
end

CashierClass.OrderConnection = ReplicatedStorage.GameService.RecivedCustomerOrder.OnClientEvent

function CashierClass:HandleCustomerDialog(Customer, Register)
    if FindChildByIndexSequence(Customer, {"Head", "DialogSimple", "Correct"}) and not CashierClass:IsInUse(Customer) then
        -- Click the bubble and select the response button for the correct dialog option
        workspace:WaitForChild("Dialog"):FireServer("ClickedBubble", Customer.Head)
        workspace:WaitForChild("Dialog"):FireServer("ResponseSelected", Customer.Head.DialogSimple.Correct, Customer.Head)

        local OrderString
        local ClientOrderConnection

        -- Listen for the customer's order
        ClientOrderConnection = self.OrderConnection:Connect(function(Order, ...)
            OrderString = Order
            ClientOrderConnection:Disconnect()
        end)

        local TimeTaken = 0

        -- Wait for the order or timeout after 10 seconds
        repeat task.wait(0.1) TimeTaken += 0.1 until OrderString or TimeTaken >= self.Timeout

        if TimeTaken >= self.Timeout then
            return
        end

        -- Ensure that the event "OrderComplete" exists and fire it correctly
        if Events:FindFirstChild("OrderComplete") then
            Events.OrderComplete:FireServer(Customer, OrderString, Register)
        else
            print("Error: 'OrderComplete' event not found.")
        end

        Customer:SetAttribute("AlreadyHandled", true)

        print("Order handled successfully!")
    end
end

function CashierClass:CustomerHasVisibleBubble(Customer)
    local Head = Customer:FindFirstChild("Head")
    local IsVisible = false
    for i, v in pairs(LocalPlayer.PlayerGui.CustomerBubbles:GetChildren()) do
        if v.Adornee == Head and v.Enabled == true then
            IsVisible = true
        end
    end
    if Customer.Head.SimpleDialogBillboard.Enabled == true then
        return false
    end
    return IsVisible
end

function CashierClass:IsInUse(Customer)
    return FindChildByIndexSequence(Customer, {"Head", "InUse"}).Value and not CashierClass:CustomerHasVisibleBubble(Customer)
end

-- Handle reset event and deactivate script
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    -- Disable or reset the script here as needed (for now it just terminates)
    print("Player reset, script deactivated.")
    -- Optionally: You can disconnect any active connections here if necessary
end)

-- Main Coroutine to handle Cashier tasks
local CashierCoroutine = coroutine.create(function()
    while wait(1) do
        print("Loop start")
        if LocalPlayer.Team ~= game:GetService("Teams").Cashier then
            TeleportToJob("Cashier")
        end

        print('Getting closest customer')
        local ClosestCustomer = CashierClass:GetClosestValidCustomer()
        if ClosestCustomer then
            print('Getting register')
            local TargetRegister = CashierClass:GetRegisterFromCustomer(ClosestCustomer)
            if TargetRegister then
                -- Only handle customer if close to them
                if (LocalPlayer.Character.HumanoidRootPart.Position - ClosestCustomer.HumanoidRootPart.Position).Magnitude < 20 then
                    print('Handling customer dialog')
                    CashierClass:HandleCustomerDialog(ClosestCustomer, TargetRegister)
                    print("Done order!")
                end
            end
        end
    end
end)

-- Start the coroutine
coroutine.resume(CashierCoroutine)
